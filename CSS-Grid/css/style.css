*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  box-sizing: inherit;
}

html {
  font-size: 112.5%;
  box-sizing: border-box;
}

/* 
.container {
  background-color: $color-white--smoke;
  width: 1000px;
  margin: 30px auto;
  display: grid;
  // Columns
  //grid-template-columns: 150px 150px 150px;
  // This time we'll end up with 3 columns sharing the available space
  grid-template-columns: repeat(3, 1fr);
  // Rows: this time using the repeat function
  grid-template-rows: repeat(2, 150px);


  // Column gap
  // column-gap: 30px;
  // Row gap
  // row-gap: 30px;

  // All in one
  gap: 30px;
}

.item {
  padding: 20px;
  font-size: 30px;
  font-family: sans-serif;
  color: $color-white;

  &--1 {
    background-color: orangered;
    // Position on row
    // grid-row-start: 2;
    // grid-row-end: 3;
    // Shorthand of the previous technique
    grid-row: 2 / 3;
    // Position on column
    // grid-column-start: 2;
    // grid-column-end: 3;
    grid-column: 2 / 3;
  }

  &--2 {
    background-color: yellowgreen;
  }

  &--3 {
    background-color: blueviolet;
  }

  &--4 {
    background-color: palevioletred;
  }

  &--5 {
    background-color: royalblue;
  }

  &--6 {
    background-color: goldenrod;
    grid-row: 1 / 2;
    grid-column: 2 / 3;
  }
}
 */
/* .container {
  margin: 30px auto;
  background-color: $color-white--smoke;
  width: 1000px;
  height: 1000px;
  display: grid;
  // grid-template-columns: repeat(2, 1fr);
  grid-template-rows: repeat(2, 100px);
  gap: 30px;
  // This will create implicit columns for the remaining items
  // The dense property will make all items packed
  grid-auto-flow: row dense;
  // Styles the implicit rows
  grid-auto-rows: 80px;
  // ALIGN GRID ITEMS IN GRID AREAS
  // Items can be aligned accros to the column axis
  // The default property is stretch. Others are center, end and start
  align-items: center;
  // Same as align-items but accross the row axis
  //justify-items: end;

  // ALIGN GRID TRACKS TO GRID CONTAINER
  grid-template-columns: repeat(2, 200px);
  // Align the tracks accross the row axis(same as in flexbox)
  justify-content: center;
  // Align the tracks accross the column axis(same as in flexbox)
  align-content: center;
  .item {
    background-color: orangered;
    font-size: 30px;
    font-family: sans-serif;
    color: $color-white;
    padding: 20px;

    &--4 {
      background-color: crimson;
      grid-row: 2 / span 3;
    }

    &--7 {
      background-color: palevioletred;
      grid-column: 1 / -1;
    }

    &--6 {
      background-color: lightcoral;
      grid-row: 2 / span 2;
    }

    &--3 {
      align-self: stretch;
      justify-self: stretch;
    }
  }
} */
.container {
  margin: 30px auto;
  background-color: #eee;
  width: 1000px;
  height: 1000px;
  display: grid;
  grid-template-rows: repeat(2, 150px);
  grid-template-columns: max-content repeat(2, minmax(150px, min-content)) min-content;
}
.container .item {
  font-size: 30px;
  font-family: sans-serif;
  color: #ffffff;
  padding: 20px;
}
.container .item--1 {
  background-color: orangered;
}
.container .item--2 {
  background-color: yellowgreen;
}
.container .item--3 {
  background-color: blueviolet;
}
.container .item--4 {
  background-color: palevioletred;
}
.container .item--5 {
  background-color: royalblue;
}
.container .item--6 {
  background-color: goldenrod;
}
.container .item--7 {
  background-color: crimson;
}
.container .item--8 {
  background-color: darkslategrey;
}

/* .container > * {
  background-color: red;
  color: white;
}

.container {
  width: 60%;
  margin: 50px auto;
  display: grid;
  grid-template-columns: repeat(4, [col-start] 1fr [col-end]);
  grid-template-rows:
    [header-start]4rem[header-end box-start] repeat(
      3,
      [box-start] 7rem [box-end]
    )
    [ footer-start] 4rem [footer-end];
  gap: 1rem;
}

.header {
  grid-row: header-start / header-end;
  grid-column: col-start 1 / -1;
}

.smallbox {
  grid-row: box-start 1 / box-end 1;
  &--1 {
    grid-column: 1 / 2;
  }
  &--2 {
    grid-column: 2 / 3;
  }
  &--3 {
    grid-column: 3 / 4;
  }
}

.sidebar {
  grid-column: col-start 4 / 5;
  grid-row: box-start 1 / span 3;
}

.main {
  grid-column: 1 / span 3;
  grid-row: box-start 2 / span 2;
}

.footer {
  grid-column: col-start 1 / -1;
  grid-row: footer-start / footer-end;
}
 */

/*# sourceMappingURL=style.css.map */
